apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    name: pipeline-build
  name: pipeline-build
  namespace: sample-project
spec:
  source:
    git:
      ref: master
      uri: 'https://github.com/Raajmaheswar/springbootapp'
    type: Git
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
        				  agent {
        					    label 'maven'
        				    }
        				  stages {				  
          					stage('Build App') {
          					  steps {
          						  sh "mvn clean install"
          					    }
          					  }
          					 stage('Create Image Builder') {
            					  when {
              						expression {
              						  openshift.withCluster() {
              							return !openshift.selector("bc", "spring1").exists();
              						  }
              						}
              					  }
              					  steps {
              						script {
              						  openshift.withCluster() {
              							openshift.newBuild("--name=spring1", "--image-stream=openshift/java:8", "--binary")
              						  }
              						}
              					  }
              					} 
              					stage('Build Image') {
              					  steps {
              						script {
              						  openshift.withCluster() {
              							openshift.selector("bc", "spring1").startBuild("--from-file=target/springbootdemo-0.0.1-SNAPSHOT.jar", "--wait")
              						  }
              						}
              					  }
              					}
              					stage('Promote to DEV') {
              					  steps {
              						script {
              						  openshift.withCluster() {
              							openshift.tag("spring1:latest", "spring1:dev")
              						  }
              						}
              					  }
              					}
              					stage('Create DEV') {
            					  when {
            						expression {
            						  openshift.withCluster() {
            							return !openshift.selector('dc', 'spring1-dev').exists()
            						  }
            						}
            					  }
            					  steps {
            						script {
            						  openshift.withCluster() {
            							openshift.newApp("spring1:latest", "--name=spring1-dev").narrow('svc').expose()
            						  }
            						}
            					  }
            					}
          				  }
        }
    type: JenkinsPipeline
  triggers:
    - type: ConfigChange
